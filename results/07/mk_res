#!/usr/bin/perl -w -I../perl

use strict;
use res;
use reg;

# Чтение данных
my @data;
res::read_tbl("data_in/e0.dat", \@data, 3);
res::read_tbl("data_in/es.dat", \@data, 5);
res::read_tbl("data_in/ef1.dat", \@data, 5);
res::read_tbl("data_in/ef2.dat", \@data, 5);
my @cdata;
reg::data_read("data_in/mmb07_a.dat", \@cdata);
reg::data_read("data_in/mmb07_b.dat", \@cdata);
MMB::Names::modif_names(\@cdata);

my @ddd;

# Подсчет результатов
for (my $n=0; $n<=$#data; $n++){

  $ddd[$n]->{n}   = $n;

  $ddd[$n]->{d}  = ${$data[$n]}[0];
  $ddd[$n]->{u}  = ${$data[$n]}[1];
  $ddd[$n]->{name}  = ${$data[$n]}[2];

  $ddd[$n]->{d0} = ${$data[$n]}[3];
  $ddd[$n]->{t0} = ${$data[$n]}[4];
  $ddd[$n]->{u0} = ${$data[$n]}[5];
  $ddd[$n]->{kp0} = ${$data[$n]}[6];
  $ddd[$n]->{pr0} = ${$data[$n]}[7];

  $ddd[$n]->{d1} = ${$data[$n]}[8];
  $ddd[$n]->{t1} = ${$data[$n]}[9];
  $ddd[$n]->{u1} = ${$data[$n]}[10];
  $ddd[$n]->{kp1} = ${$data[$n]}[11];
  $ddd[$n]->{pr1} = ${$data[$n]}[12];

  $ddd[$n]->{d2} = ${$data[$n]}[13];
  $ddd[$n]->{t2} = ${$data[$n]}[14];
  $ddd[$n]->{u2} = ${$data[$n]}[15];
  $ddd[$n]->{kp2} = ${$data[$n]}[16];
  $ddd[$n]->{pr2} = ${$data[$n]}[17];

  my $p=0;
  foreach (0..17){
    $p++ if ${$data[$n]}[$_] ne '';
  }
  next if $p==0; # нет заполненых полей вообще

  warn "несовпадение дистанций для команды $n: ".
       "$ddd[$n]->{d} - $ddd[$n]->{d0} - $ddd[$n]->{d1} - $ddd[$n]->{d2}\n"
    if ((($ddd[$n]->{t0} ne '')&&($ddd[$n]->{d} ne $ddd[$n]->{d0}))||
        (($ddd[$n]->{t1} ne '')&&($ddd[$n]->{d} ne $ddd[$n]->{d1}))||
        (($ddd[$n]->{t2} ne '')&&($ddd[$n]->{d} ne $ddd[$n]->{d2})));

  warn "не совпадает число участников в команде $n: ".
       "$ddd[$n]->{u} - $ddd[$n]->{u0} - $ddd[$n]->{u1} - $ddd[$n]->{u2}\n"
    if ((($ddd[$n]->{t0} ne '')&&($ddd[$n]->{u} ne $ddd[$n]->{u0})&&($ddd[$n]->{pr0}!~/su/))||
        (($ddd[$n]->{t1} ne '')&&($ddd[$n]->{u} ne $ddd[$n]->{u1})&&($ddd[$n]->{pr1}!~/su/))||
        (($ddd[$n]->{t2} ne '')&&($ddd[$n]->{u} ne $ddd[$n]->{u2})&&($ddd[$n]->{pr2}!~/su/)));

  my $shtr0;
  my $shtr1;
  my $shtr2;
  if ($ddd[$n]->{d} eq 'a'){
    $shtr0 = res::kp_conv($ddd[$n]->{kp0}, {1=>120, 2=>120, 3=>120, 4=>120, 5=>120, 6=>120});
    $shtr1 = res::kp_conv($ddd[$n]->{kp1}, {1=>120, 2=>120, 3=>120, 4=>120, 5=>120, 6=>120, 7=>120, 8=>120, 9=>120, 10=>120, 11=>120});
    $shtr2 = res::kp_conv($ddd[$n]->{kp2}, {12=>120, 13=>120, 14=>120, 15=>120, 16=>120, 17=>120, 18=>120, 19=>120, 20=>120, 21=>120, 22=>120, 23=>120});
    $ddd[$n]->{ts1} = "23:20";
  }
  if ($ddd[$n]->{d} eq 'b'){
    $shtr0 = res::kp_conv($ddd[$n]->{kp0}, {1=>120, 2=>120, 3=>120, 4=>120, 5=>120, 6=>120, 7=>120, 8=>120});
    $shtr1 = res::kp_conv($ddd[$n]->{kp1}, {1=>120, 2=>120, 3=>120, 4=>120, 5=>120, 6=>120, 7=>120, 8=>120, 9=>120, 10=>120, 11=>120, 12=>120, 13=>120, 14=>120, 15=>120, 16=>120, 17=>120, 18=>120, 19=>120, 20=>120, 21=>120, 22=>120, 23=>120, 24=>120});
    $shtr2 = res::kp_conv($ddd[$n]->{kp2}, {25=>120, 26=>120, 27=>120, 28=>120, 29=>120, 30=>120, 31=>120, 32=>120, 33=>120, 34=>120, 35=>120, 36=>120});
    $ddd[$n]->{ts1} = "23:00";
  }

  $ddd[$n]->{ts2} = "7:00";

  $ddd[$n]->{r0}='';
  if ($ddd[$n]->{t0} ne ''){
    $ddd[$n]->{r0}= 24*60 + res::time_conv($ddd[$n]->{t0}, "2:30") - res::time_conv($ddd[$n]->{ts1}, "22:00") + $shtr0;
  }
  $ddd[$n]->{r1}='';
  if ($ddd[$n]->{t1} ne ''){
    $ddd[$n]->{r1} = 24*60 + res::time_conv($ddd[$n]->{t1}, "8:00") - res::time_conv($ddd[$n]->{ts1}, "22:00") + $shtr1;

  }

  if ( (($ddd[$n]->{t0} eq "") ||
       (res::time_conv($ddd[$n]->{t0}, "2:30") > 5*60)) && 
      ($ddd[$n]->{t1} ne "") && 
      (res::time_conv($ddd[$n]->{t1}, "8:00")< 11*60)) {
    $ddd[$n]->{r1}+=24*60;
    if ($ddd[$n]->{r1} - $shtr1 > (7+24)*60 - res::time_conv($ddd[$n]->{ts1}, "22:00")) {$ddd[$n]->{ts2} = $ddd[$n]->{t1}}
  }

  $ddd[$n]->{r2}='';
  if ($ddd[$n]->{t2} ne ''){
    $ddd[$n]->{r2}= res::time_conv($ddd[$n]->{t2}, "7:00") - res::time_conv($ddd[$n]->{ts2}, "7:00") + $shtr2;
  }

  
  $ddd[$n]->{r} ='';
  $ddd[$n]->{r} = $ddd[$n]->{r1}+$ddd[$n]->{r2}
    if (($ddd[$n]->{r1} ne '')&&($ddd[$n]->{r2} ne ''));

}

foreach my $dist ('a','b'){

# определение мест
my (%r0c, %r1c, %r2c, %rc);
my (%r0m, %r1m, %r2m, %rm);

for (my $n=0; $n<=$#ddd; $n++){ # сколько мест с одинаковым временем
  next if $ddd[$n]->{d} ne $dist;
  $r0c{$ddd[$n]->{r0}}++ if $ddd[$n]->{r0} ne '';
  $r1c{$ddd[$n]->{r1}}++ if $ddd[$n]->{r1} ne '';
  $r2c{$ddd[$n]->{r2}}++ if $ddd[$n]->{r2} ne '';
  next if $ddd[$n]->{pr0} eq 'su';
  next if $ddd[$n]->{pr1} eq 'su';
  next if $ddd[$n]->{pr2} eq 'su';
  next if $ddd[$n]->{pr0} eq 'tr';
  next if $ddd[$n]->{pr1} eq 'tr';
  next if $ddd[$n]->{pr2} eq 'tr';
#  next if $ddd[$n]->{pr1} eq 'kv';
#  next if $ddd[$n]->{pr2} eq 'kv';
#  next if $ddd[$n]->{pr3} eq 'kv';
  $rc{$ddd[$n]->{r}}++ if $ddd[$n]->{r} ne '';
}

my $m=1;
foreach (sort {$a<=>$b} keys %r0c){
  $m += $r0c{$_};
  if ($r0c{$_}==1) {$r0m{$_} = $m-1;}
  else {$r0m{$_} = ($m-$r0c{$_})."-".($m-1);}
}
$m=1;
foreach (sort {$a<=>$b} keys %r1c){
  $m += $r1c{$_};
  if ($r1c{$_}==1) {$r1m{$_} = $m-1;}
  else {$r1m{$_} = ($m-$r1c{$_})."-".($m-1);}
}
$m=1;
foreach (sort {$a<=>$b} keys %r2c){
  $m += $r2c{$_};
  if ($r2c{$_}==1) {$r2m{$_} = $m-1;}
  else {$r2m{$_} = ($m-$r2c{$_})."-".($m-1);}
}
$m=1;
foreach (sort {$a<=>$b} keys %rc){
  $m += $rc{$_};
  if ($rc{$_}==1) {$rm{$_} = $m-1;}
  else {$rm{$_} = ($m-$rc{$_})."-".($m-1);}
}
$r0m{''}='';
$r1m{''}='';
$r2m{''}='';
$rm{''}='';


# глобальный порядок сортировки
my $i=0;
foreach (@ddd) {
  $_->{srt} = 50000;
  next if $_->{d} ne $dist;
  $_->{m0} = $r0m{$_->{r0}};
  $_->{m1} = $r1m{$_->{r1}};
  $_->{m2} = $r2m{$_->{r2}};
  $_->{m} = $rm{$_->{r}};

  $_->{m} = '' if ($_->{pr0} eq 'su');  ## вне зачета
  $_->{m} = '' if ($_->{pr1} eq 'su');  ## вне зачета
  $_->{m} = '' if ($_->{pr2} eq 'su');  ## вне зачета
  $_->{m} = '' if ($_->{pr0} eq 'tr');  ## вне зачета
  $_->{m} = '' if ($_->{pr1} eq 'tr');  ## вне зачета
  $_->{m} = '' if ($_->{pr2} eq 'tr');  ## вне зачета
#  $_->{m} = '' if ($_->{pr1} eq 'kv');  ## вне зачета
#  $_->{m} = '' if ($_->{pr2} eq 'kv');  ## вне зачета
#  $_->{m} = '' if ($_->{pr3} eq 'kv');  ## вне зачета

  if    ($_->{m}  =~ /^(\d+)/) {$_->{srt} = $1;}
  elsif ($_->{m2} =~ /^(\d+)/) {$_->{srt} = $1+10000;} ### внезачетники
  elsif ($_->{m1} =~ /^(\d+)/) {$_->{srt} = $1+20000;} ### внезачетники
  elsif ($_->{m0} =~ /^(\d+)/) {$_->{srt} = $1+30000;} ### только первый этап
  else  {$_->{srt} = $i+40000; $i++}
}

 # dist


### вывод!

open OUT, "> data_out/res07$dist.htm";
my $fg_m = '#F00000';

print OUT qq*
<html><head>
<style type="TEXT/CSS">
TH {font-family: sans-serif; font-size:15px; background-color: \#A0A0A0;}
TD {font-family: sans-serif; font-size:15px; background-color: \#C0C0C0;}
</STYLE>
</head>
<body>
*;

print OUT qq*
<p><table border=0 cellspacing=1 cellpadding=5>
<tr><th colspan=12><font size="+2">Результаты ММБ2007, дистанция А</font></th>
<th colspan=2>$res::mmb_count
</th>
</tr>
<tr>
<td colspan=15>
<p>132 км - Заокский, 11-13 мая

<p>Первый этап: 11 КП, 37 км. Старт в 23:20 пятницы 11 мая,
контрольное время до 7:00 воскресенья.

<p>Второй этап: 12 КП, 23 км. Старт в 7:00 
воскресенья, контрольное время -- до 20:00 воскресенья. 

<p>Команды, опоздавшие к 7:00 на пром.финиш могли стартовать позже.
При этом время старта второго этапа считается равным времени финиша
первого этапа.

<p>Штраф за невзятие КП -- 2 часа

<p> Карты дистанции:
<p>
<a href="07/a1.png">  <img src="07/a1.jpg"  width=160 height=114 alt="a-1 (первый этап)"></a>
<a href="07/a2.png">  <img src="07/a2.jpg"  width=114 height=160 alt="a-2 (первый этап)"></a>
<a href="07/a3.png">  <img src="07/a3.jpg"  width=160 height=114 alt="a-3 (второй этап)"></a>
<a href="07/a4.png">  <img src="07/a4.jpg"  width=160 height=114 alt="a-4 (второй этап)"></a>
</td>
</tr>
* if $dist eq 'a'; 

print OUT qq*
<p><table border=0 cellspacing=1 cellpadding=5>
<tr><th colspan=12><font size="+2">Результаты ММБ2007, дистанция Б</font></th>
<th colspan=2>$res::mmb_count
</th>
</tr>
<tr>
<td colspan=15>
<p>132 км - Заокский, 11-13 мая

<p>Первый этап: 24 КП, 60 км. Старт в 23:00 пятницы 11 мая,
контрольное время до 7:00 воскресенья.

<p>Второй этап: 12 КП, 23 км. Старт в 7:00 
воскресенья, контрольное время -- до 20:00 воскресенья. 

<p>Команды, опоздавшие к 7:00 на пром.финиш могли стартовать позже. При этом время старта второго этапа
считается равным времени финиша первого этапа.

<p>Штраф за невзятие КП -- 2 часа

<p> Карты дистанции:
<p>
<a href="07/b1.png">  <img src="07/b1.jpg"  width=160 height=114 alt="b-1 (первый этап)"></a>
<a href="07/b2.png">  <img src="07/b2.jpg"  width=160 height=114 alt="b-2 (первый этап)"></a>
<a href="07/b3.png">  <img src="07/b3.jpg"  width=114 height=160 alt="b-3 (первый этап)"></a>
<a href="07/b4.png">  <img src="07/b4.jpg"  width=160 height=114 alt="b-4 (второй этап)"></a>
<a href="07/b5.png">  <img src="07/b5.jpg"  width=160 height=114 alt="b-5 (второй этап)"></a>
</td>
</tr>
</td>
</tr>
* if $dist eq 'b'; 


print OUT qq*
<tr>
<th rowspan=2>N</th>
<th rowspan=2>Команда</th>
<th colspan=5>первый этап</th>
<th colspan=4>второй этап</th>
<th colspan=2>итог</th>
</tr>
<tr>
<th>см.карт</th>
<th>финиш</th>
<th>невз.КП</th>
<th>рез.</th>
<th>место</th>
<th>финиш</th>
<th>невз.КП</th>
<th>рез.</th>
<th>место</th>
<th>рез.</th>
<th>место</th>
</tr>
*;

foreach ( sort {$a->{srt} <=> $b->{srt}} @ddd) {
#  next if $_->{u1} eq '';
  next if $_->{d} ne $dist;

  $_->{r0} = res::m2t($_->{r0});
  $_->{r1} = res::m2t($_->{r1});
  $_->{r2} = res::m2t($_->{r2});
  $_->{r} = res::m2t($_->{r});

# $_->{pr2} = 'вых. за к.в.' if $_->{pr2} eq 'kv';
#  $_->{pr3} = '*' if $_->{pr3} eq 'kv';
  $_->{pr0} = 'сх.уч.' if $_->{pr0} eq 'su';
  $_->{pr1} = 'сх.уч.' if $_->{pr1} eq 'su';
  $_->{pr2} = 'сх.уч.' if $_->{pr2} eq 'su';
  $_->{pr0} = 'исп.транспорта' if $_->{pr0} eq 'tr';
  $_->{pr1} = 'исп.транспорта' if $_->{pr1} eq 'tr';
  $_->{pr2} = 'исп.транспорта' if $_->{pr2} eq 'tr';
#  $_->{pr2} = 'время финиша приблизительно' if $_->{pr2} eq 'fa';

#  foreach my $f ('kp1','m1','t2s','kp2','m2','m','r1','r2','r'){
#    $_->{$f} = '&nbsp;' if $_->{$f} eq '';
#  }

  print OUT "<tr>", reg::html_cell(\@cdata, $_->{n}), "\n";
  print OUT "<td>$_->{t0}";
  print OUT "<br>$_->{pr0}" if defined $_->{pr0};
  print OUT "</td>\n";
  print OUT "<td>$_->{t1}";
  print OUT "<br>$_->{pr1}" if defined $_->{pr1};
  print OUT "</td>\n";
  print OUT "<td align=center>$_->{kp1}</td>\n";
  print OUT "<td align=center>$_->{r1}</td>\n";
  print OUT "<td align=center>$_->{m1}</td>\n";

  print OUT "<td>$_->{t2}";
  print OUT "<br>$_->{pr2}" if defined $_->{pr2};
  print OUT "</td>\n";
  print OUT "<td align=center>$_->{kp2}</td>\n";
  print OUT "<td align=center>$_->{r2}</td>\n";
  print OUT "<td align=center>$_->{m2}</td>\n";

  print OUT "<td align=center><font size=\"+1\">$_->{r}</font></td>\n";
  print OUT "<td align=center><font color=\"$fg_m\" size=\"+1\">$_->{m}</font></td>\n";
  print OUT "</tr>\n";
}
print OUT qq*
<tr>
<th colspan=15>

<p>Подготовка дистанции: А.Тонис, А.Чупикин, В.Львов, В.Завьялов.<br>
Проведение марш-броска: А.Тонис, А.Чупикин, В.Завьялов, К. и П. Шрамовы, А. и Д. Жилины, Дима, А.Савватеев, А. и Л.Каменские, Н.Теннова, А.Обухов<br>
Очень существенную помощь оказали участники (к сожалению, многих не смог вспомнить): Т.Алексеевский, О.Геллер, М.Сорокина, Д.Любимова...

</th>
</tr>
</table>
</body>
</html>
*;


open OUT, "> data_out/ludi07$dist.txt";
foreach ( sort {$a->{srt} <=> $b->{srt}} @ddd ) {
  next if $_->{d} ne $dist;
#  next if $_->{t1s} eq '';
  my $nu=0;
  foreach my $u (1..9){
    $nu++ if $cdata[$_->{n}]->{"u$u"} ne '';
  }
  foreach my $u (1..9){
    next if $cdata[$_->{n}]->{"u$u"} eq '';
    printf OUT "%-40s\tN%d%s", $cdata[$_->{n}]->{"u$u"}, $_->{n}, ($_->{d} eq 'a' ?'А':'Б');
    printf OUT " \"%s\"", $cdata[$_->{n}]->{"name"} if $cdata[$_->{n}]->{"name"} ne '';
    printf OUT " ($nu чел.)\t";

    if ($_->{m} ne '') {
      print OUT "$_->{r} ($_->{m} место)";}
    elsif ($_->{r} ne '') {
      print OUT "$_->{r} (вне зачета)";}
    else {print OUT "сход с дистанции";}
    print OUT "\n";
  }
}

}

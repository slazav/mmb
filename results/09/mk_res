#!/usr/bin/perl -w -I../perl

use strict;
use reg;
use MMB::CPList;
use MMB::IO;
use MMB::Res;
use MMB::HTML;
use MMB::CSV;
use MMB::Names;

my $mmb_id='09';
my $mmb_name='ММБ2009-весна';

# Чтение данных
my @data;
# Читаем таблицы протоколов.
# В первой колонке должен быть номер команды, в остальных - указанные поля
MMB::IO::read_table('data_in/s1a',  \@data, 'd_st','t_st','u_st');
MMB::IO::read_table('data_in/s1b',  \@data, 'd_st','t_st','u_st');
MMB::IO::read_table('data_in/kp14b',\@data, 'd_14','t_14','u_14','kp_14');
MMB::IO::read_table('data_in/pf',   \@data, 'd_pf','t_pf','u_pf','kp_pf');
MMB::IO::read_table('data_in/f',    \@data, 'd_f', 't_f', 'u_f', 'kp_f');

# Читаем регистрационные данные (полученные из скрипта регистрации,
# исправленные по регистрационным протоколам)
MMB::IO::read_yaml('data_in/mmb09.yaml', \@data, 'name', 'people', 'gps', 'dist');

# читаем табличку примечаний к командам и участникам
# <номер команды> <номер участника> <примечание>
MMB::IO::read_comm('data_in/comm', \@data);

MMB::Names::modif_names(\@data);

foreach(@data){
  next if !defined $_;

  if (exists $_->{dist}){
    $_->{dist} = 'a' if $_->{dist} eq "0";
    $_->{dist} = 'b' if $_->{dist} eq "1";
  }

  # эти поля должны быть определены для любой команды!
### !
#  my @f = ('N', 'people', 'dist', 'd_st');
  my @f = ('N', 'people', 'dist');
  warn "\nНе определено одно из полей (", join(" ", @f), ") для команды:\n",
    YAML::Tiny::Dump($_)  if ! MMB::IO::test_def($_, @f);

  # дистанция во всех активных точках должна совпадать для любой команды!
### !
  @f = ('dist', 'd_st', 'd_14', 'd_pf', 'd_f');
  warn "\nНе совпадает дистанция (", join(" ", @f), ") для команды:\n",
    YAML::Tiny::Dump($_)  if ! MMB::IO::test_eq($_, @f);

  # проверка, что все сошедшие участники упомянуты в комментариях
  @f = ('u_14', 'u_pf', 'u_f');
  warn "\nЧто-то не так с числом участников (", join(" ", @f), ") для команды:\n",
    YAML::Tiny::Dump($_)  if ! MMB::IO::test_people($_, @f);

  $_->{kp_2e}.=',57' if (!exists $_->{t_57}) && exists($_->{kp_2e}) && (MMB::CPList::unpack_list($_->{kp_2e})=~/57/>0);

  # пересобираем списки невзятых КП
  $_->{kp_14}   = MMB::CPList::repack_list($_->{kp_14})   if exists($_->{kp_14});
  $_->{kp_pf}   = MMB::CPList::repack_list($_->{kp_pf})   if exists($_->{kp_pf});
  $_->{kp_f}    = MMB::CPList::repack_list($_->{kp_f})    if exists($_->{kp_f});

  # k_14 = k_pf урезанному до 1-13
  warn "\nЧто-то не так с числом КП на п/ф и на КП14 для команды:\n",
    YAML::Tiny::Dump($_)  if defined $_->{kp_14} && defined $_->{kp_pf} &&
                             (MMB::CPList::cut($_->{kp_pf},"1-13") ne $_->{kp_14});

  # считаем штрафы
  my @pen_sp=("1-4", , "5-13",  30);
  if ($_->{dist} eq 'a'){ # дистанция А
    $_->{pen_1e}   = MMB::CPList::cp_pen($_->{kp_pf}, {"1-4", 60,  "5-15", 180}) if exists $_->{kp_pf};
    $_->{pen_2e}   = MMB::CPList::cp_pen($_->{kp_f}, {"21-28", 180}) if exists $_->{kp_f};
  }
  if ($_->{dist} eq 'b'){ # дистанция Б
    $_->{pen_14}   = MMB::CPList::cp_pen($_->{kp_14}, {"1-4", 60,  "5-13", 180}) if exists $_->{kp_14};
    $_->{pen_1e}   = MMB::CPList::cp_pen($_->{kp_pf}, {"1-4", 60,  "5-17", 180}) if exists $_->{kp_pf};
    $_->{pen_2e}   = MMB::CPList::cp_pen($_->{kp_f}, {"21-28", 180}) if exists $_->{kp_f};
  }

  # время старта 2 этапа:
  # если команда финишировала на 1 эт. до 7:00 - то 7:00, если позже,
  # то = времени финиша.
  if (exists($_->{t_pf})){
    if (MMB::Res::tconv($_->{t_pf}, "11:40") > (24+7)*60){
      $_->{t_st2} = $_->{t_pf};
    } else {
      $_->{t_st2} = "7:00";
    }
  }

  # подсчет результатов (в минутах)

  my $tst;
  $tst=MMB::Res::tconv($_->{t_st}, "20:00") if exists($_->{t_st});
  $tst=25*60 if (defined($tst) && $tst>25*60); # if > 1:00 set to 1:00

  $_->{res_14} = MMB::Res::tconv($_->{t_14}, "10:00") -
                 $tst + 24*60 + $_->{pen_14}
    if defined($tst) && exists($_->{t_14}) && exists($_->{pen_14});

  $_->{res_1e} = MMB::Res::tconv($_->{t_pf}, "11:40") -
                 $tst + 24*60 + $_->{pen_1e}
    if defined($tst) && exists($_->{t_pf}) && exists($_->{pen_1e});

  $_->{res_2e} = MMB::Res::tconv($_->{t_f}, "11:00") -
                 MMB::Res::tconv($_->{t_st2},  "6:00") +
                 $_->{pen_2e}
    if exists($_->{t_st2}) && exists($_->{t_f}) && exists($_->{pen_2e});

  $_->{res} = $_->{res_1e} + $_->{res_2e}
    if exists($_->{res_1e}) && exists($_->{res_2e});

}

# считаем места
MMB::Res::make_places(\@data, 'a', 'res_1e', 'place_1e');
MMB::Res::make_places(\@data, 'a', 'res_2e', 'place_2e');
MMB::Res::make_places(\@data, 'a', 'res',    'place');

MMB::Res::make_places(\@data, 'b', 'res_14', 'place_14');
MMB::Res::make_places(\@data, 'b', 'res_1e', 'place_1e');
MMB::Res::make_places(\@data, 'b', 'res_2e', 'place_2e');
MMB::Res::make_places(\@data, 'b', 'res',    'place');


# кидаем все данные в yaml!
YAML::Tiny::DumpFile("data_out/res$mmb_id.yaml", @data);
`gzip -f "data_out/res$mmb_id.yaml"`;

# кидаем данные в csv!
open OUT, "> data_out/res$mmb_id.csv" or die "can't write to res$mmb_id.csv";
my @fields = ('t_st', 't_14', 't_pf', 't_st2', 't_f', 
    'kp_14', 'kp_1e', 'kp_2e', 'res_14', 'place_14', 
    'res_1e', 'place_1e', 'res_2e', 'place_2e', 'res', 'place');
print OUT MMB::CSV::DumpH(@fields), "\n";
foreach (@data) {
  next if !defined;
  print OUT MMB::CSV::Dump($_, @fields), "\n";
}
close OUT;
`gzip -f "data_out/res$mmb_id.csv"`;

# порядок сортировки
# и заодно преобразуем результаты к часам:минутам
# важно, что порядок сортировки определяется и для неопределенных ранее команд!
my $i=0;
foreach (@data) {
  if    ((exists $_->{place}) && ($_->{place}        =~ /^(\d+)/))   {$_->{srt} = $1;}
  elsif ((exists $_->{place_2e}) && ($_->{place_2e}  =~ /^(\d+)/))   {$_->{srt} = 10000+$1;} # таких не должно быть
  elsif ((exists $_->{place_1e}) && ($_->{place_1e}  =~ /^(\d+)/))   {$_->{srt} = 20000+$1;}
  elsif ((exists $_->{place_sm}) && ($_->{place_sm}  =~ /^(\d+)/))   {$_->{srt} = 30000+$1;}
  else  {$_->{srt} = $i+40000; $i++}

  $_->{res_sm} = MMB::Res::m2t($_->{res_sm}) if exists ($_->{res_sm});
  $_->{res_1e} = MMB::Res::m2t($_->{res_1e}) if exists ($_->{res_1e});
  $_->{res_2e} = MMB::Res::m2t($_->{res_2e}) if exists ($_->{res_2e});
  $_->{res}    = MMB::Res::m2t($_->{res})    if exists ($_->{res});
}



### вывод HTML!

my $dt=`date +'%x %X'`;

foreach my $dist ('a', 'b'){

open OUT, "> data_out/res$mmb_id$dist.htm" or
  die "can't open file for html output";

my $dist_r = ($dist eq 'a')? 'А':'Б';

print OUT qq*
<html><head>
$MMB::HTML::styles
<title>Результаты $mmb_name, дистанция $dist_r</title>
</head>
<body>
<div align=right>обновление: $dt</div>
<p><table border=0 cellspacing=1 cellpadding=5>
<tr>
<th colspan=10><font size="+2">Результаты $mmb_name, дистанция $dist_r</font></th>
<th colspan=2>$MMB::HTML::counter</th>
</tr>
<tr>
<td colspan=12>
<p>Омутище - 168 км, 14-16 мая
*;

print OUT qq*

<p>Первый этап: 15 КП, 35 км (в том числе спецэтап из 4 КП). Старт c
20:00 пятницы  14 мая до 1:00 субботы, контрольное время до 9:00
воскресенья.

<p>Второй этап: 8 КП, 21 км. Старт в 7:00 воскресенья, контрольное
время -- до 20:00 воскресенья.

<p>Команды, опоздавшие к 7:00 на пром.финиш могли стартовать позже.
При этом время старта второго этапа считается равным времени финиша
первого этапа.

<p>Штраф за невзятие КП спецэтапа -- 1 час, остальных КП -- 3 часа

<p> Карты дистанции:
<p>
<a href="09/m1a.png"> <img src="09/m1a.jpg"  alt="лист 1"></a>
<a href="09/m2a.png"> <img src="09/m2a.jpg"  alt="лист 2"></a>
<a href="09/m3a.png"> <img src="09/m3a.jpg"  alt="лист 3"></a>
* if $dist eq 'a'; 

print OUT qq*

<p>Первый этап: 17 КП, 53 км (в том числе спецэтап из 4 КП). Старт c
20:00 пятницы  14 мая до 1:00 субботы, контрольное время до 9:00
воскресенья.

<p>Второй этап: 8 КП, 25 км. Старт в 7:00 воскресенья, контрольное
время -- до 20:00 воскресенья.

<p>Команды, опоздавшие к 7:00 на пром.финиш могли стартовать позже.
При этом время старта второго этапа считается равным времени финиша
первого этапа.

<p>Штраф за невзятие КП спецэтапа -- 1 час, остальных КП -- 3 часа

<p> Карты дистанции:
<p>
<a href="09/m1b.png"> <img src="09/m1b.jpg"  alt="лист 1"></a>
<a href="09/m2b.png"> <img src="09/m2b.jpg"  alt="лист 2"></a>
<a href="09/m3b.png"> <img src="09/m3b.jpg"  alt="лист 3"></a>
* if $dist eq 'b'; 


print OUT qq*
<div align=right>
<a href="res$mmb_id.yaml.gz">[YAML]</a>
<a href="res$mmb_id.csv.gz">[CSV]</a>
</div>
</td>
</tr>
<tr>
<th rowspan=2>N</th>
<th rowspan=2>Команда</th>
<th colspan=4>первый этап</th>
<th colspan=4>второй этап</th>
<th colspan=2>итог</th>
</tr>
<tr>
<th>старт - финиш</th>
<th>невз.КП</th>
<th>рез.</th>
<th>место</th>

<th>старт - финиш</th>
<th>невз.КП</th>
<th>рез.</th>
<th>место</th>

<th>рез.</th>
<th>место</th>
</tr>
*;

foreach (sort {$a->{srt} <=> $b->{srt}} @data) {
  next if !exists $_->{people};
  next if !exists $_->{t_st};
  next if $_->{dist} ne $dist;

  # определим все поля, которые нам нужны для вывода
  foreach my $f (split ' ', 't_st t_sm t_pf t_st2 t_fin  kp_spec kp_1e kp_2e'){
    $_->{$f} = '' unless exists $_->{$f};
  }

  print OUT "<tr>", MMB::HTML::people($_);
  print OUT "<td align=center>$_->{t_st} - $_->{t_sm} - $_->{t_pf}</td>\n";
  print OUT "<td align=center>$_->{kp_1e}</td>\n";
  print OUT MMB::HTML::res_place1($_->{res_1e}, $_->{place_1e});
  print OUT "<td align=center>$_->{t_st2} - $_->{t_f}</td>";
  print OUT "<td align=center>$_->{kp_2e}</td>\n";
  print OUT MMB::HTML::res_place1($_->{res_2e}, $_->{place_2e});
  print OUT MMB::HTML::res_place($_->{res}, $_->{place});
  print OUT "</tr>\n";
}
print OUT qq*

<tr><th colspan=15>
<p>Карта: А.Чупикин, с исправлениями тех, кто ставил и тестировал дистанцию.
<p>Подготовка дистанции: А.Тонис, А.Чупикин, В.Завьялов, Л.Фишкис, С.Дорохов.
<p>Тестирование дистанции: ...
<p>Проведение марш-броска: А.Тонис, А.Чупикин, Н.Иванова, Е.Артамонова, В.Золотухина, 
Е.Алексанова, И.Лысов, М.Архипов, М.Архипова, С.Дорохов, В.Завьялов, К.Шрамов.
<p>Также в проведении помогали участники: ...
</th></tr></table>
</body>
</html>
*;
close OUT;

open OUT, "> data_out/ludi$mmb_id$dist.txt" or
  die "can't open file for txt output";
foreach ( @data ) {
  next if !exists $_->{people};
  next if !exists $_->{t_st};
  next if $_->{dist} ne $dist;

  my $nu=$#{$_->{people}};

  foreach my $u (@{$_->{people}}){

    printf OUT "%-40s\tN%d%s", $u, $_->{N}, ($_->{dist} eq 'a')?'А':'Б';
    printf OUT " \"%s\"", $_->{name} if exists $_->{name};
    printf OUT " (%d чел.)\t", $#{$_->{people}}+1;

    if (exists $_->{place}) {
      print OUT "$_->{res} ($_->{place} место)";}
    elsif (exists($_->{res}) && exists($_->{place})) {
      print OUT "$_->{res} (вне зачета)";}
    else {print OUT "сход с дистанции";}
    print OUT "\n";
  }
}

}

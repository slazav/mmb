package MMB::Names;

use strict;
use warnings;
use locale;

my @names = split /\s+/,
"Азат Айгуль Айдар Алан Алекс Александр Александра Алексей Алена
Аленка Алеша Алёна Алёнка Алёша Алик Алина Алиса Алла Алька Анастасия
Анатолий Ангелина Андрей Андрюха Анна Аннушка Антон Антонина Анфиса
Анюта Аня Арина Аркадий Арсений Артем Артемий Артём Ася Батр Борис
Булгун Буличка Вадим Валентин Валентина Валера Валерий Валерия Варвара
Варвара Василий Венера Вера Вероника Вероничка Вика Виктор Виктория
Виолетта Виталий Владимир Владислав Вова Вовка Володя Всеволод
Вячеслав Галина Галя Гелий Гена Геннадий Георгий Герман Глеб Григорий
Гриша Гуля Даниил Данил Данила Дарья Даша Денис Диана Дима Димон
Димтрий Дина Дмитрий Дольган Ева Евгений Евгения Егор Екатерина Елена
Елизавета Елисей Жанна Женек Женя Зорик Зоя Иван Игнат Игорь Илназ
Ильдар Илья Ильяс Инка Инна Ира Ира Ираида Ирина Камил Карен Карина
Катерина Катюха Катя Кира Кирилл Коля Константин Костя Кристина Ксения
Курамин Лада Лариса Лев Левон Лена Леня Леонид Лера Леша Лёня Лидия
Лизавета Лилия Любовь Людмила Люся Макс Максим Малика Марат Маргарита
Марианна Марина Мария Марк Марлен Марсель Маша Митя Митяй Миха Михаил
Миша Модест Надежда Надя Настя Наталия Наталья Наталя Наташа Нектарий
Ник Никита Николай Нина Оксана Олег Олеся Ольга Оля Павел Петр
Петруччо Пётр Платон Ползунов Полина Рафаэль Рем Ринат Рита Рома Роман
Руслан Саша Света Светлана Святослав Семен Семён Сергей Сердар Серега
Слава Соня Софья Станислав Стас Степан Сузан Тадеуш Таисия Тамара Таня
Тарас Тася Татьяна Тим Тимофей Тимур Толик Толли Тоня Ульяна Федор Фил
Филипп Шура Эдуард Элина Юлия Юля Юра Юрий Яков Яна Ярослав";

sub test_name{
  my $name = shift;

  return 0 unless $name =~ /^\s*([^\s,]+)[,\s]+([^\s,]+)/;
  my $n1 = $1;
  my $n2 = $2;

  foreach (@names){
    return 1 if ($n1 eq $_) || ($n2 eq $_);
  }
  return 0;
}

sub print_names{
  print join " ", sort(@names);
}


sub modif_names{
  my $data=shift;

  my $Rus = '[АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ]';
  my $rus = '[абвгдеёжзийклмнопрстуфхцчшщъыьэюя]';
  my $nr = "$Rus?$rus*";

  for (my $i = 0; $i <= $#{$data}; $i++){
    next if !defined $data->[$i];
    my $d = $data->[$i];
    next if !exists $d->{people};

    for (my $j=0; $j <= $#{$d->{people}}; $j++){
      my $p=$d->{people}->[$j];

      my ($n1,$n2,$y);

      if    ($p =~ /^($nr)[,\s]+($nr\.?)[,\s]*(\d+)/)                   { ($n1,$n2,$y) = ($1,$2,$3);}
      elsif ($p =~ /^($nr-$nr)[,\s]+($nr\.?)[,\s]*(\d+)/)            { ($n1,$n2,$y) = ($1,$2,$3);}
      elsif ($p =~ /^($nr)[,\s]+($nr\.?)[,\s]+$nr\.?[,\s]*(\d+)/)       { ($n1,$n2,$y) = ($1,$2,$3);}
      elsif ($p =~ /^($nr-$nr)[,\s]+($nr\.?)[,\s]+$nr\.?[,\s]*(\d+)/){ ($n1,$n2,$y) = ($1,$2,$3);}
      elsif ($p =~ /^($nr)[,\s]+($nr\.?)/)                              { ($n1,$n2,$y) = ($1,$2,'');}
      elsif ($p =~ /^($nr-$nr)[,\s]+($nr\.?)/)                       { ($n1,$n2,$y) = ($1,$2,'');}
      elsif ($p =~ /^($nr)$/)                                           { ($n1,$n2,$y) = ($1,'','');}
      elsif ($p =~ /^($nr-$nr)$/)                                    { ($n1,$n2,$y) = ($1,'','');}
      else {print STDERR $p, " --> looks strange\n"; next;}

      $y += 1900 if ($y ne '') && ($y<100);
      my $un=1;

      foreach (@names){
        if ($n1 eq $_){
          my $nn=$n1;
          $n1=$n2;
          $n2=$nn;
        }
        $un=0 if ($n2 eq $_);
      }
      my $old = $p;
      if ($y ne '') {$p = "$n1 $n2, $y";}
      else {$p = "$n1 $n2";}

#      print STDERR "$old --> ", $p,"\n" if ($p ne $old);
      print STDERR "Unknown name in: $p\n" if ($un==1);
      $data->[$i]->{people}->[$j] = $p;
    }
  }
}


1;


package MMB::Names;

use strict;
use warnings;
use locale;

my @names = split /\s+/,
"Азат Айгуль Айдар Алан Алевтина Алекс Александр Александра Алексей
Алена Аленка Алеша Алёна Алёнка Алёша Алик Алина Алиса Алла Алтынай
Алька Анастасия Анатолий Ангелина Анджей Андрей Андриан Андрюха Анна
Аннушка Антон Антонина Анфиса Анюта Аня Арина Аркадий Арсений Артем
Артемий Артём Артур Ася Басан Батр Борис Булгун Буличка Вадим
Валентин Валентина Валера Валерий Валерия Варвара Василий Венера Вера
Вероника Вероничка Вика Виктор Виктория Виолетта Виталий Влад Владимир
Владислав Вова Вовка Володя Всеволод Вячеслав Галина Галя Гелий Гена
Геннадий Георгий Герман Глеб Григорий Гриша Гуля Давид Даниил Данил
Данила Дарья Даша Денис Диана Дима Димитрий Димон Дина Дмитрий
Дольган Ева Евгений Евгения Егор Екатерина Елена Елизавета Елисей
Жанна Женек Женя Зорик Зоя Иван Игнат Игорь Илназ Ильдар Илья Ильяс
Инка Инна Ира Ираида Ирина Камил Карен Карина Катерина Катюха Катя
Кира Кирилл Коля Константин Костя Кристина Ксения Курамин Лада Лариса
Лев Левон Лена Леня Леонид Лера Леша Лёня Лидия Лизавета Лилия Линар
Любовь Людмила Люся Макс Максим Малика Марат Маргарита Марианна Марина
Мария Марк Марлен Марсель Маша Митя Митяй Миха Михаил Миша Модест
Мурзик Мыкола Надежда Надя Настя Наталия Наталья Наталя Наташа
Нектарий Ник Никита Николай Николь Нина Оксана Олег Олеся Ольга Оля
Омульер Павел Петр Петруччо Пётр Платон Полина Прохор Радик
Рафаэль Рем Ринат Рита Рома Роман Ростислав Руслан Савелий Саша Света
Светлана Святослав Семен Семён Сергей Сердар Серега Слава Соня
София Софья Станислав Стас Степан Сузан Тадеуш Таисия Тамара Таня
Тарас Тася Татьяна Тим Тимофей Тимур Тихон Толик Толли Тоня Ульяна
Федор Фил Филипп Шура Эдуард Элина Эльмира Эрдэм Юлия Юля Юра Юрий
Яков Яна Ярослав Яша
Олька Сева Янина Витя Марита Омар Вован Неля Эдвин Леонтина Саня Рашид
Лиза Аля Нелли Альгис Станислава Пан Тома Фёдор Таша Дионисий Эрнольд
Ада Рустем Захар Кузьма Согомон Эльвира
";

sub test_name{
  my $name = shift;

  return 0 unless $name =~ /^\s*([^\s,]+)[,\s]+([^\s,]+)/;
  my $n1 = $1;
  my $n2 = $2;

  foreach (@names){
    return 1 if ($n1 eq $_) || ($n2 eq $_);
  }
  return 0;
}

sub print_names{
  print join "\n", sort(@names);
}

sub modif_single_name{
  my $p=shift;
  my ($n1,$n2,$y);
  my $Rus = '[АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ]';
  my $rus = '[абвгдеёжзийклмнопрстуфхцчшщъыьэюя]';
  my $nr = "$Rus?$rus*";

  if    ($p =~ /^($nr)[,\s]+($nr\.?)[,\s]*(\d+)/)                   { ($n1,$n2,$y) = ($1,$2,$3);}
  elsif ($p =~ /^($nr-$nr)[,\s]+($nr\.?)[,\s]*(\d+)/)            { ($n1,$n2,$y) = ($1,$2,$3);}
  elsif ($p =~ /^($nr)[,\s]+($nr\.?)[,\s]+$nr\.?[,\s]*(\d+)/)       { ($n1,$n2,$y) = ($1,$2,$3);}
  elsif ($p =~ /^($nr-$nr)[,\s]+($nr\.?)[,\s]+$nr\.?[,\s]*(\d+)/){ ($n1,$n2,$y) = ($1,$2,$3);}
  elsif ($p =~ /^($nr)[,\s]+($nr\.?)/)                              { ($n1,$n2,$y) = ($1,$2,'');}
  elsif ($p =~ /^($nr-$nr)[,\s]+($nr\.?)/)                       { ($n1,$n2,$y) = ($1,$2,'');}
  elsif ($p =~ /^($nr)$/)                                           { ($n1,$n2,$y) = ($1,'','');}
  elsif ($p =~ /^($nr-$nr)$/)                                    { ($n1,$n2,$y) = ($1,'','');}
  else {print STDERR $p, " --> looks strange\n"; return $p}

  $y += 1900 if ($y ne '') && ($y<100);
  my $un=1;

  foreach (@names){
    if ($n1 eq $_){
      my $nn=$n1;
      $n1=$n2;
      $n2=$nn;
    }
    $un=0 if ($n2 eq $_);
  }
  print STDERR "Unknown name in: $p\n" if ($un==1);

  if ($y ne '') {return "$n1 $n2, $y";}
  else {return "$n1 $n2";}
}

sub modif_names{
  my $data=shift;

  for (my $i = 0; $i <= $#{$data}; $i++){
    next if !defined $data->[$i];
    my $d = $data->[$i];

    # new-style data
    if (exists $d->{people}){
      for (my $j=0; $j <= $#{$d->{people}}; $j++){
        my $p=modif_single_name($d->{people}->[$j]);
        $data->[$i]->{people}->[$j] = $p;
      }
    }
    # old-style data
    for (my $j=0; $j <= 9; $j++){
      if ((exists $d->{"u$j"}) && ($d->{"u$j"} ne '')){
        my $p=modif_single_name($d->{"u$j"});
        $data->[$i]->{"u$j"} = $p;
      }
    }

  }
}

my @name_subst= split /\n+/,"
ё/е
Гриша/Григорий;
Аленка/Алена
Алеша/Алексей
Андрюха/Андрей
Аннушка/Анна
Анюта/Анна
Аня/Анна
Вася/Василий
Валера/Валерий
Вероничка/Вероника
Вика/Виктория
Даша/Дарья
Дима/Дмитрий
Димон/Дмитрий
Лена/Елена
Катя/Екатерина
Катерина/Екатерина
Катюха/Екатерина
Костя/Константин
Леня/Леонид
Леша/Алексей
Женек/Евгений
Ира/Ирина
Инка/Инна
Маша/Мария
Миха/Михаил
Миша/Михаил
Надя/Надежда
Настя/Анастасия
Наташа/Наталья
Коля/Николай
Оля/Ольга
Рома/Роман
Рита/Маргарита
Серега/Сергей
Соня/София
Софья/София
Стас/Станислав
Таня/Татьяна
Тим/Тимофей
Юля/Юлия
Юра/Юрий
Яша/Яков
Зубковская Екатерина/Алексанова Екатерина
Саморукова Екатерина/Рукавицына Екатерина
Блинова Евгения/Гороховская Евгения
Калугина Анастасия/Калашникова Анастасия
Парамонова Ольга/Комахина Ольга
";

sub name2key{
  my $name=shift;

  foreach (@name_subst){
    my ($a,$b) = split '/';
    next unless defined $a and defined $b;
    $name =~s/$a/$b/g;
  }
  return $name;
}

1;

